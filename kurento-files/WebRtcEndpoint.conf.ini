;; External (public) IP address of the media server.
;;
;; If you know what will be the external or public IP address of the media server
;; (e.g. because your deployment has an static IP), you can specify it here.
;; Doing so has the advantage of not needing to configure STUN/TURN for the media
;; server.
;;
;; STUN/TURN are needed only when the media server sits behind a NAT and needs to
;; find out its own external IP address. However, if you set a static external IP
;; address with this parameter, then there is no need for the STUN/TURN
;; auto-discovery.
;;
;; The effect of this parameter is that ALL local ICE candidates that are
;; gathered (for WebRTC) will contain the provided external IP address instead of
;; the local one.
;;
;; <externalAddress> is an IPv4 or IPv6 address.
;;
;; Examples:
;; externalAddress=10.20.30.40
;; externalAddress=2001:0db8:85a3:0000:0000:8a2e:0370:7334
;;
;externalAddress=10.20.30.40

;; Local network interfaces used for ICE gathering.
;;
;; If you know which network interfaces should be used to perform ICE (for
;; WebRTC connectivity), you can define them here. Doing so has several
;; advantages:
;;
;; * The WebRTC ICE gathering process will be much quicker. Normally, it needs
;;   to gather local candidates for all of the network interfaces, but this step
;;   can be made faster if you limit it to only the interface that you know will
;;   work.
;;
;; * It will ensure that the media server always decides to use the correct
;;   network interface. With WebRTC ICE gathering it's possible that, under some
;;   circumstances (in systems with virtual network interfaces such as
;;   "docker0") the ICE process ends up choosing the wrong local IP.
;;
;; <networkInterfaces> is a comma-separated list of network interface names.
;;
;; Examples:
;; networkInterfaces=eth0
;; networkInterfaces=eth0,enp0s25
;;
;networkInterfaces=eth0

;; STUN server IP address.
;;
;; The ICE process uses STUN to punch holes through NAT firewalls.
;;
;; <stunServerAddress> MUST be an IP address; domain names are NOT supported.
;;
;; You need to use a well-working STUN server. Use this to check if it works:
;; https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/
;;
;; From that check, you should get at least one Server-Reflexive Candidate
;; (type "srflx").
;;
stunServerAddress=45.79.88.189
stunServerPort=3478

;; TURN server URL.
;;
;; When STUN is not enough to open connections through some NAT firewalls,
;; using TURN is the remaining alternative.
;;
;; Note that TURN is a superset of STUN, so you don't need to configure STUN
;; if you are using TURN.
;;
;; The provided URL should follow one of these formats:
;;
;;   * user:password@ipaddress:port
;;   * user:password@ipaddress:port?transport=[udp|tcp|tls]
;;
;; <ipaddress> MUST be an IP address; domain names are NOT supported.
;; <transport> is OPTIONAL. Possible values: udp, tcp, tls. Default: udp.
;;
;; You need to use a well-working TURN server. Use this to check if it works:
;; https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/
;;
;; From that check, you should get at least one Server-Reflexive Candidate
;; (type "srflx") AND one Relay Candidate (type "relay").
;;
# TODO: You should set this
; turnURL=turnunit:some_password@45.79.88.189:3478

;pemCertificate is deprecated. Please use pemCertificateRSA instead
;pemCertificate=<path>
;pemCertificateRSA=<path>
;pemCertificateECDSA=<path>
